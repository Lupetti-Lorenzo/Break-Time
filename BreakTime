/*
cose che servono per GET UP AND STRETCH

"configuration": {
			"title": "Lupex productivity",
			"properties": {
				"lupex.timer": {
					"type": "boolean",
					"default": true,
					"description": "A timer that sits in the status bar that can be started, stopped and restarted to timer your coding sessions."
				},
				"lupex.countDown.enabled": {
					"type": "boolean",
					"default": true,
					"description": "A countdown that sits in the status bar and tells you when is time to get up and do some stretching."
				},
				"lupex.countDown.redTextLastTotSeconds": {
					"type": "string",
					"default": "30 seconds",
					"enum": [
						"inactive",
						"30 seconds",
						"1 minute",
						"2 minutes",
						"5 minutes"
					],
					"description": "The last tot seconds of the count down are displayed red"
				}
			}
		}





        //
	//COUNT DOWN
	//

	if (config.countDown.enabled === true) {
		let myStatusBarItem: vscode.StatusBarItem;
		let intervalID: any = undefined;
		let currentTime: number = 0;
		const statusBarIcon: string = "$(timeline-open)";
		const statusBarTxt: string = `${statusBarIcon} Next Stretch`;
		// register a command that is invoked when the status bar item is selected
		const myCommandId = "lupex.countDown";
		subscriptions.push(
			vscode.commands.registerCommand(myCommandId, () => {
				if (intervalID === undefined) {
					//Initialize quickpick
					const quickPick = vscode.window.createQuickPick();
					quickPick.items = [
						{ label: "1 min" },
						{ label: "5 min" },
						{ label: "10 min" },
						{ label: "20 min" },
						{ label: "25 min" },
						{ label: "30 min" },
						{ label: "35 min" },
						{ label: "40 min" },
						{ label: "60 min" },
					];

					quickPick.onDidChangeSelection(([item]) => {
						if (item) {
							//set the time picked and start the count down
							let time = Number(item.label.slice(0, 2));
							currentTime = time * 60;
							startLoop(time);
						}
						quickPick.hide();
					});
					quickPick.show();
				} else {
					//if the timer is already set, interrupt it and set everything to default.
					resetCountDown();
				}
			}),
		);

		// create a new status bar item
		myStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 299);

		myStatusBarItem.command = myCommandId;
		myStatusBarItem.text = statusBarTxt;
		myStatusBarItem.show();
		subscriptions.push(myStatusBarItem);

		function resetCountDown() {
			myStatusBarItem.text = statusBarTxt;
			clearInterval(intervalID);
			myStatusBarItem.color = undefined;
			intervalID = undefined;
		}

		function startLoop(time: number) {
			//set interval that handle the count down
			intervalID = setInterval(() => {
				if (currentTime <= 0) {
					vscode.window.showInformationMessage(`${time} mins passed, get up and do some stretching!!`);
					resetCountDown();
				} else {
					currentTime--;

					//last 30s display red text
					const setting: string = config.countDown.redTextLastTotSeconds;
					if (setting !== "inactive") {
						const color: string = "firebrick";
						let num: number;
						if (setting.slice(0, 1) !== "3") {
							num = Number(setting.slice(0, 1)) * 60;
						} else {
							num = 30;
						}
						if (currentTime <= num && myStatusBarItem.color !== color) {
							myStatusBarItem.color = color;
						}
					}
					//update the text
					myStatusBarItem.text = statusBarIcon + ` ${new Date(currentTime * 1000).toISOString().substr(11, 8)}`;
				}
			}, 1000);
		}
	}

*/